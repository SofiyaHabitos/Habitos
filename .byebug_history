c
VehicleType.find(driver.vehicle_type).vehicle_type_name
c
VehicleType.find(driver.vehicle_type).vehicle_type_name
c
VehicleType.find(driver.vehicle_type).vehicle_type_name
c
VehicleType.find(driver.vehicle_type).vehicle_type_name
c
VehicleType.find(driver.vehicle_type).vehicle_type_name
c
VehicleType.find(driver.vehicle_type).vehicle_type_name
VehicleType.find(driver.vehicle_type)
driver
c
VehicleType.find(driver.vehicle_type_name)
driver.vehicle_type
VehicleType.find(3)
driver
c
params
c
driver
c
driver
c
driver
c
driver
c
driver
driver.last
c
driver.last
driver
c
VehicleType.all
driver
c
VehicleType.find_by(id: driver.vehicle_type)
driver
c
result.flatten
 result.push({driver: driver[0],vehicle: driver[1],date: date_wise}) 
 result = []
result.push({driver: driver[0],vehicle: driver[1],date: date_wise})   
date_wise.push({date: date,no_of_trips: trip_count,cost_total: total_cost,cost_trip: cost,avg_km: avg_cost_km,avg_wait: avg_waiting_cost, avg_serv: avg_serv_cost}) 
               avg_serv_cost = trip_detail.pluck(:serving_charging).compact.sum / trip_count
               avg_waiting_cost = trip_detail.pluck(:waiting_charge).compact.sum / trip_count
               avg_cost_km = trip_detail.pluck(:rate).sum / trip_count
               cost = cost_info.present? ? cost_info.sum : 0
 total_cost = total_cost.present? ? total_cost.sum : 0
                    cost_info.push(cost)
                    total_cost.push(tot_cost)
                    cost = ind.distance * ind.rate
                    tot_cost = ind.distance * ind.rate + ind.waiting_charge.to_i + ind.serving_charging.to_i
serv_charge = ind.serving_charging? ? ind.serving_charging : 0
wait_charge = ind.waiting_charge? ? ind.waiting_charge : 0
 distance = ind.distance.present? ? ind.distance : 0
ind = trip_detail.first
trip_detail.first
trip_detail
              cost_info = []
 total_cost = []
 trip_count = detail.count
trip_detail = TripDetail.where(id: id)
id = detail.pluck(:trip_detail_id)
c
trip.group_by(&:date)
date_wise = []
c
vessel_count
meal_time
trip[1]
trip
driver.driver_name
driver
driver.vehicle_no
driver
ind
TripAssignment.first
VehicleType.find(driver.vehicle_type).vehicle_type_name
VehicleType.find(driver.vehicle_type)
driver = Driver.last
VehicleType.find(driver.vehicle_type)
driver.vehicle_type.present? ? 1 : 0
driver.vehicle_type
VehicleType.find(driver.vehicle_type).present?
VehicleType.find(driver.vehicle_type)
driver = Driver.first
VehicleType.find(driver.vehicle_type)
driver = Driver.last
driver
VehicleType.find(driver.vehicle_type)
VehicleType.find(driver.vehicle_type).vehicle_type_name
VehicleType.find(2).vehicle_type_name
VehicleType.find(2)
TripAssignment.first
Driver.last
driver = Driver.find_by(driver_name: trip[2])
trip[2]
trip
driver = Driver.find_by(driver_name: trip[3])
ind
trip = data.first
info = data.first
data
ind["id"]
ind["trip_type"]
TripAssignment.first.status
TripAssignment.first
ind
ind.id
ind
TripAssignment.last
meal_time
mealtime
TripAssignment.new
 pickup_time = td_id != [] ? meal_time.first.dispatch_time : 0
@utensils_notreceived = VesselDispatch.where(utensil_received: false, tag: Tag.where(status: "Dispatched")).includes(:tenant_detail,:tag) 
vessel_count = td_id != [] ? VesselDispatch.where(tenant_detail_id: td_id,date: params[:date].to_date).count : 0
 ind["trip_type"] 
 ind["trip_type"] == "Delivery"
if ind["trip_type"] == "Delivery"
 td_id = meal_time.pluck(:id)
meal_time.present?
if meal_time.present?
meal_time = tenant_details
if meal_time.present?
meal_time = tenant_details
tenant_details = Tenant.find(ind.destination).tenant_details
destination = Tenant.find(ind.destination).name
 source = Tenant.find(ind.source).name
ind
c
params["trip"]["report_time"]
params["report_time"]
params
@trip_detail
c
params["trip"]["report_time"]
params["report_time"]
params
@trip = Trip.find(params[:id])
@trip
c
customer_info
data
c
params
c
 response = RestClient.post "https://api.tookanapp.com/v2/add_agent", tookan.to_json, :content_type => "application/json"
tookan = {"api_key": "50656385f0454f414453697f164425431be2c0fd2ad47e3e5e1a08", "phone": data[:contact_no], "transport_type": "1","timezone": "+530", "team_id": "272227", "password": data[:password], "username": data[:username], "first_name": data[:driver_name], "rule_id": "71192" }
 data = driver_params
 response["status"] == 200
params
c
date_wise
c
date_wise
c
date_wise
c
result
result.push(driver=> date_wise)
result.push(driver)
result = []
driver
date_wise
c
date_wise
date_wise.merge({date: date,no_of_trips: trip_count,cost_total: total_cost,cost_trip: cost,avg_km: avg_cost_km,avg_wait: avg_waiting_cost, avg_serv: avg_serv_cost})
({date: date,no_of_trips: trip_count,cost_total: total_cost,cost_trip: cost,avg_km: avg_cost_km,avg_wait: avg_waiting_cost, avg_serv: avg_serv_cost})
date_wise
c
date_wise.merge({date: date,no_of_trips: trip_count,cost_total: total_cost,cost_trip: cost,avg_km: avg_cost_km,avg_wait: avg_waiting_cost, avg_serv: avg_serv_cost})
date_wise
c
date_wise
c
avg_waiting_cost
avg_serv_cost
c
0/3
avg_cost_km = trip_detail.pluck(:rate)
cost
total_cost
c
ind.serving_charging
ind.waiting_charge
 cost = ind.distance * ind.rate
tot_cost = ind.distance * ind.rate + ind.waiting_charge + ind.serving_charging
ind
c
detail
ind
ind.distance
c
TripDetail.first
TripDetail.first.distance * TripDetail.first.rate
TripDetail.first.distance
TripDetail.first
TripDetail.where(id: trip_details).pluck(:distance,:rate)
TripDetail.first
TripDetail.where(id: trip_details)
trip_details = detail.pluck(:trip_detail_id)
TripDetail.first
detail.pluck(:trip_detail_id)
detail
date
c
driver
c
detail
c
driver
trip.count
trip
driver.count
trip
driver
c
trip.pluck(:vehicle)
trip.count
driver
detail
c
detail
c
puts v[:date]
TripAssignment.first
puts v["driver"]
puts v.driver
puts v
puts k
c
trip
c
VehicleType.find(trip.vehicle_type_id).vehicle_type_name
VehicleType.find(trip.vehicle_type_id)
VehicelType.find(trip.vehicle_type_id)
VehicelType.find(trip.vehicle_type_id).name
trip.vehicle_type_id
trip.vehicle_tyoe_id
trip
c
 response = JSON.parse(response)
 response = RestClient.post "https://api.tookanapp.com/v2/add_agent", tookan.to_json, :content_type => "application/json"
 tookan = {"api_key": "50656385f0454f414453697f164425431be2c0fd2ad47e3e5e1a08", "phone": data[:contact_no], "transport_type": "1","timezone": "+530", "team_id": "272227", "password": data[:password], "username": data[:username], "first_name": data[:driver_name], "rule_id": "71192" }
 data = driver_params
c
response = JSON.parse(response)
response = RestClient.post "https://api.tookanapp.com/v2/add_agent", tookan.to_json, :content_type => "application/json"
 tookan = {"api_key": "50656385f0454f414453697f164425431be2c0fd2ad47e3e5e1a08", "phone": data[:contact_no], "transport_type": "1","timezone": "+530", "team_id": "272227", "password": data[:password], "username": data[:username], "first_name": data[:driver_name], "rule_id": "71192" }
data = driver_params
c
