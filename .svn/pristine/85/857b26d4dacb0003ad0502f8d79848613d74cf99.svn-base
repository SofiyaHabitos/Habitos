class MenuCustomersController < ApplicationController
  before_action :set_menu_customer, only: [:edit, :update, :destroy]

  # GET /menu_customers
  # GET /menu_customers.json
  def index
    @menu_customers = MenuCustomer.all
  end

  # GET /menu_customers/1
  # GET /menu_customers/1.json
  def show
    @menu_customers = MenuCustomer.where(id: params[:id].split("/"))
  end

  # GET /menu_customers/new
  def new
    @menu_customer = MenuCustomer.new
  end

  # GET /menu_customers/1/edit
  def edit
  end

  # POST /menu_customers
  # POST /menu_customers.json
  def create
  
    @menu_customer = MenuCustomer.new(menu_customer_params)

    respond_to do |format|
      if @menu_customer.save
        MenuCustomer.daily_transction
        format.html { redirect_to @menu_customer, notice: 'Menu customer was successfully created.' }
        format.json { render :show, status: :created, location: @menu_customer }
      else
        format.html { render :new }
        format.json { render json: @menu_customer.errors, status: :unprocessable_entity }
      end
    end
  end

  # PATCH/PUT /menu_customers/1
  # PATCH/PUT /menu_customers/1.json
  def update
    respond_to do |format|
      if @menu_customer.update(menu_customer_params)
        format.html { redirect_to @menu_customer, notice: 'Menu customer was successfully updated.' }
        format.json { render :show, status: :ok, location: @menu_customer }
      else
        format.html { render :edit }
        format.json { render json: @menu_customer.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /menu_customers/1
  # DELETE /menu_customers/1.json
  def destroy
    @menu_customer.destroy
    respond_to do |format|
      format.html { redirect_to menu_customers_url, notice: 'Menu customer was successfully destroyed.' }
      format.json { head :no_content }
    end
  end

  def daily_cook_sheet
    
      @menu_customers = MenuCustomer.where(date: Date.today)
      if @menu_customers.present?
        @menu_items = MenuCustomer.daily_cook_sheet(Date.today)
        @menu_items1 = MenuCustomer.daily_cook_sheet1(Date.today)
        @menu_items2 = MenuCustomer.daily_cook_sheet2(Date.today)
        @menu_items3 = MenuCustomer.daily_cook_sheet3(Date.today)
        @menu_items4 = MenuCustomer.daily_cook_sheet4(Date.today)
        @menu_items5 = MenuCustomer.daily_cook_sheet5(Date.today)
        @menu_items6 = MenuCustomer.daily_cook_sheet6(Date.today)
       @tenants = @menu_customers.pluck(:tenant_id).uniq.map { |e| Tenant.find(e).name }
      else
        @menu_items = nil
        @menu_items1 = nil
      end
if Category.find_by(category_name: "Lunch").present?
    if @menu_customers.where(category_id:Category.find_by(category_name: "Lunch").id).present? 
      @menu_customers.where(category_id:Category.find_by(category_name: "Lunch").id).pluck(:category_id).uniq.map do |category_id| 
       
        items_list=[]
          @menu_customers.where(category_id: category_id).each do |menu_customer|
            menu_customer.menu_master.menu_production_items.each do |item| 
              items_list << item.production_item.name
            end
          end
 
        c=@menu_items[0].count*2
        @result=[]
        items_list.uniq.map do |i|
          sub_result=[]
            c.times do |t|
              sub_result<< "-"
            end
          @result<<[i,sub_result].flatten
        end
      @menu_items[0].each_with_index do |value, index|
          value[:menus].map do |sub|
            @result.each_with_index do |v,l|  
              if v[0]==sub[0][:item_name]
                @result[l][index+index+1]=sub[0][:quantity];  
                @result[l][index+index+2]=sub[0][:result].round(2);  
              end
            end
          end
      end
    end

    if @result.present?
        even_num=@result.map {|i| i.values_at(* i.each_index.select {|i| i.even?})}
        even_num.map{|i| i.delete("-")}
        even_num.map{|i| i.shift}
        total=even_num.map{|i| i.sum.round(2)}.flatten
        @result.each_with_index{|v,i| v.push(total[i])}
    end

end
end
if  Category.find_by(category_name: "Breakfast").present?


 if @menu_customers.where(category_id:Category.find_by(category_name: "Breakfast").id).present? 
      @menu_customers.where(category_id:Category.find_by(category_name: "Breakfast").id).pluck(:category_id).uniq.map do |category_id| 
       
        items_list1=[]
          @menu_customers.where(category_id: category_id).each do |menu_customer|
            menu_customer.menu_master.menu_production_items.each do |item| 
              items_list1 << item.production_item.name
            end
          end
 
        c=@menu_items1[0].count*2
        @result1=[]
        items_list1.uniq.map do |i|
          sub_result1=[]
            c.times do |t|
              sub_result1<< "-"
            end
          @result1<<[i,sub_result1].flatten
        end
      @menu_items1[0].each_with_index do |value, index|
          value[:menus].map do |sub|
            @result1.each_with_index do |v,l|  
              if v[0]==sub[0][:item_name]
                @result1[l][index+index+1]=sub[0][:quantity];  
                @result1[l][index+index+2]=sub[0][:result].round(2);  
              end
            end
          end
      end
    end

    if @result1.present?
        even_num1=@result1.map {|i| i.values_at(* i.each_index.select {|i| i.even?})}
        even_num1.map{|i| i.delete("-")}
        even_num1.map{|i| i.shift}
        total1=even_num1.map{|i| i.sum.round(2)}.flatten
        @result1.each_with_index{|v,i| v.push(total1[i])}
    end

end
end

if Category.find_by(category_name: "Dinner").present?
 if @menu_customers.where(category_id:Category.find_by(category_name: "Dinner").id).present? 
      @menu_customers.where(category_id:Category.find_by(category_name: "Dinner").id).pluck(:category_id).uniq.map do |category_id| 
       
        items_list2=[]
          @menu_customers.where(category_id: category_id).each do |menu_customer|
            menu_customer.menu_master.menu_production_items.each do |item| 
              items_list2 << item.production_item.name
            end
          end
 
        c=@menu_items2[0].count*2
        @result2=[]
        items_list2.uniq.map do |i|
          sub_result2=[]
            c.times do |t|
              sub_result2<< "-"
            end
          @result2<<[i,sub_result2].flatten
        end
      @menu_items2[0].each_with_index do |value, index|
          value[:menus].map do |sub|
            @result2.each_with_index do |v,l|  
              if v[0]==sub[0][:item_name]
                @result2[l][index+index+1]=sub[0][:quantity];  
                @result2[l][index+index+2]=sub[0][:result].round(2);  
              end
            end
          end
      end
    end

    if @result2.present?
        even_num2=@result2.map {|i| i.values_at(* i.each_index.select {|i| i.even?})}
        even_num2.map{|i| i.delete("-")}
        even_num2.map{|i| i.shift}
        total2=even_num2.map{|i| i.sum.round(2)}.flatten
        @result2.each_with_index{|v,i| v.push(total2[i])}
    end

end
end
if  Category.find_by(category_name: "Brunch").present?
  
if @menu_customers.where(category_id:Category.find_by(category_name: "Brunch").id).present? 
      @menu_customers.where(category_id:Category.find_by(category_name: "Brunch").id).pluck(:category_id).uniq.map do |category_id| 
       
        items_list3=[]
          @menu_customers.where(category_id: category_id).each do |menu_customer|
            menu_customer.menu_master.menu_production_items.each do |item| 
              items_list3 << item.production_item.name
            end
          end
 
        c=@menu_items3[0].count*2
        @result3=[]
        items_list3.uniq.map do |i|
          sub_result3=[]
            c.times do |t|
              sub_result3<< "-"
            end
          @result3<<[i,sub_result3].flatten
        end
      @menu_items3[0].each_with_index do |value, index|
          value[:menus].map do |sub|
            @result3.each_with_index do |v,l|  
              if v[0]==sub[0][:item_name]
                @result3[l][index+index+1]=sub[0][:quantity];  
                @result3[l][index+index+2]=sub[0][:result].round(2);  
              end
            end
          end
      end
    end

    if @result3.present?
        even_num3=@result3.map {|i| i.values_at(* i.each_index.select {|i| i.even?})}
        even_num3.map{|i| i.delete("-")}
        even_num3.map{|i| i.shift}
        total3=even_num3.map{|i| i.sum.round(2)}.flatten
        @result3.each_with_index{|v,i| v.push(total3[i])}
    end

end
end
if Category.find_by(category_name: "Mid-day Snacks ").present?
  
if @menu_customers.where(category_id:Category.find_by(category_name: "Mid-day Snacks ").id).present? 
      @menu_customers.where(category_id:Category.find_by(category_name: "Mid-day Snacks ").id).pluck(:category_id).uniq.map do |category_id| 
       
        items_list4=[]
          @menu_customers.where(category_id: category_id).each do |menu_customer|
            menu_customer.menu_master.menu_production_items.each do |item| 
              items_list4 << item.production_item.name
            end
          end
 
        c=@menu_items4[0].count*2
        @result4=[]
        items_list4.uniq.map do |i|
          sub_result4=[]
            c.times do |t|
              sub_result4<< "-"
            end
          @result4<<[i,sub_result4].flatten
        end
      @menu_items4[0].each_with_index do |value, index|
          value[:menus].map do |sub|
            @result4.each_with_index do |v,l|  
              if v[0]==sub[0][:item_name]
                @result4[l][index+index+1]=sub[0][:quantity];  
                @result4[l][index+index+2]=sub[0][:result].round(2);  
              end
            end
          end
      end
    end

    if @result4.present?
        even_num4=@result4.map {|i| i.values_at(* i.each_index.select {|i| i.even?})}
        even_num4.map{|i| i.delete("-")}
        even_num4.map{|i| i.shift}
        total4=even_num4.map{|i| i.sum.round(2)}.flatten
        @result4.each_with_index{|v,i| v.push(total4[i])}
    end

end
end
if Category.find_by(category_name: "Tea Break - Morning").present?
  
if @menu_customers.where(category_id:Category.find_by(category_name: "Tea Break - Morning").id).present? 
      @menu_customers.where(category_id:Category.find_by(category_name: "Tea Break - Morning").id).pluck(:category_id).uniq.map do |category_id| 
       
        items_list5=[]
          @menu_customers.where(category_id: category_id).each do |menu_customer|
            menu_customer.menu_master.menu_production_items.each do |item| 
              items_list5 << item.production_item.name
            end
          end
 
        c=@menu_items5[0].count*2
        @result5=[]
        items_list5.uniq.map do |i|
          sub_result5=[]
            c.times do |t|
              sub_result5<< "-"
            end
          @result5<<[i,sub_result5].flatten
        end
      @menu_items5[0].each_with_index do |value, index|
          value[:menus].map do |sub|
            @result5.each_with_index do |v,l|  
              if v[0]==sub[0][:item_name]
                @result5[l][index+index+1]=sub[0][:quantity];  
                @result5[l][index+index+2]=sub[0][:result].round(2);  
              end
            end
          end
      end
    end

    if @result5.present?
        even_num5=@result5.map {|i| i.values_at(* i.each_index.select {|i| i.even?})}
        even_num5.map{|i| i.delete("-")}
        even_num5.map{|i| i.shift}
        total5=even_num5.map{|i| i.sum.round(2)}.flatten
        @result5.each_with_index{|v,i| v.push(total5[i])}
    end

end
end
if Category.find_by(category_name: "Tea Break - Evening").present?
  
if @menu_customers.where(category_id:Category.find_by(category_name: "Tea Break - Evening").id).present? 
      @menu_customers.where(category_id:Category.find_by(category_name: "Tea Break - Evening").id).pluck(:category_id).uniq.map do |category_id| 
       
        items_list6=[]
          @menu_customers.where(category_id: category_id).each do |menu_customer|
            menu_customer.menu_master.menu_production_items.each do |item| 
              items_list6 << item.production_item.name
            end
          end
 
        c=@menu_items6[0].count*2
        @result6=[]
        items_list6.uniq.map do |i|
          sub_result6=[]
            c.times do |t|
              sub_result6<< "-"
            end
          @result6<<[i,sub_result6].flatten
        end
      @menu_items6[0].each_with_index do |value, index|
          value[:menus].map do |sub|
            @result6.each_with_index do |v,l|  
              if v[0]==sub[0][:item_name]
                @result6[l][index+index+1]=sub[0][:quantity];  
                @result6[l][index+index+2]=sub[0][:result].round(2);  
              end
            end
          end
      end
    end

    if @result6.present?
        even_num6=@result6.map {|i| i.values_at(* i.each_index.select {|i| i.even?})}
        even_num6.map{|i| i.delete("-")}
        even_num6.map{|i| i.shift}
        total6=even_num6.map{|i| i.sum.round(2)}.flatten
        @result6.each_with_index{|v,i| v.push(total6[i])}
    end

end

end


end


def csv_sheet

  file_path = MenuCustomer.file_generate(params)
  send_file file_path  
    
  
=begin
 respond_to do |format|
      format.html
      format.csv { send_data MenuCustomer.file_generate }
     end
=end
end  

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_menu_customer
      @menu_customer = MenuCustomer.find(params[:id])
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def menu_customer_params
      params.require(:menu_customer).permit(:date, :tenant_id, :menu_master_id, :category_id, :order_no)
    end
end
