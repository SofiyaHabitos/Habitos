class KitchenUser < ApplicationRecord
  belongs_to :kitchen
  belongs_to :role
  acts_as_paranoid
  validates :name, presence: true, uniqueness: { case_sensitive: false}, length: { in: 3..100 }
  validates :kitchen_id,:role_id, presence: true
  validates :user_name,presence: true,uniqueness: { case_sensitive: false }, length: { in: 3..100 }
  validates :email, presence: true, uniqueness: { case_sensitive: false}, length: { in: 6..100 }
  validates_format_of :email, :with => /\A[^@]+@([^@\.]+\.)+[^@\.]+\z/
  validates_format_of :mobile_number ,with: /\A(\d{10}|\(?\d{3}\)?[-. ]\d{3}[-.]\d{4})\z/
  validates_format_of :email, with: /\A[\w]([^@\s,;]+)@(([\w-]+\.)+(com|edu|org|net|gov|mil|biz|info|in))\z/i
  validates :password_digest,length: 5..70, allow_blank: { on: :update }, presence: { on: :create }
  before_create :generate_auth_token
 # validates_format_of :name , :with => /^[a-zA-Z0-9_]*[a-zA-Z][a-zA-Z0-9_]*$/, :multiline => true 
  #validates_format_of :amount_paid, :with => /^[0-9]+\.[0-9]{2}*$/,:multiline => true , :message => "must contain dollars and cents, seperated by a period"
private

 def generate_auth_token

  begin
  
    self.auth_token = SecureRandom.hex
  
  end while self.class.exists?(auth_token: auth_token)
 
 end
end

